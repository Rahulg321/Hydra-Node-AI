datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id            String    @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model ExamType {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  exams Exam[]
}

model ExamLevel {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  exams Exam[]
}

model Exam {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  examTypeId  String
  examLevelId String
  examType    ExamType  @relation(fields: [examTypeId], references: [id])
  examLevel   ExamLevel @relation(fields: [examLevelId], references: [id])
}
