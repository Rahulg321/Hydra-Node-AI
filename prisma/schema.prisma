generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// command to run a docker for connecting postgres
// docker run -d -e POSTGRES_DB=mydb -e POSTGRES_PASSWORD=testpass123 -e POSTGRES_USER=postgres -p "6500:5432" postgres

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile      Profile?
  quizSessions QuizSession[]

  isTwoFactorEnabled Boolean? @default(false)

  // one to one relation between user and two factor confirmation
  TwoFactorConfirmation TwoFactorConfirmation?
  Payment               Payment[]
  Subscription          Subscription?          @relation(fields: [subscriptionId], references: [id])

  stripeCustomerId    String?   @unique
  subscriptionEndDate DateTime?
  Invoice             Invoice[]
  subscriptionId      String?
}

enum SubscriptionStatus {
  CREATED
  UPDATED
  DELETED
}

model Payment {
  id                    String        @id @default(cuid())
  userId                String
  user                  User          @relation(fields: [userId], references: [id])
  amount                Float
  currency              String
  status                PaymentStatus
  paymentType           PaymentType
  stripePaymentIntentId String        @unique
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
}

enum PaymentType {
  ONE_TIME
  SUBSCRIPTION
}

enum PaymentStatus {
  SUCCEEDED
  FAILED
  PENDING
}

model Subscription {
  id     String  @id @default(cuid())
  email  String?
  userId String?

  plan_id    String?
  status     SubscriptionStatus
  start_date DateTime
  end_date   DateTime
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  User       User[]
}

enum InvoiceStatus {
  SUCCEEDED
  FAILED
}

model Invoice {
  id                String        @id @default(cuid())
  subscription_id   String?
  currency          String
  amount_paid       Int?
  stripe_invoice_id String
  amount_due        Int?
  status            InvoiceStatus
  email             String
  userId            String?
  user              User?         @relation(fields: [userId], references: [id])
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// exam type means the vendor that the exams belong to
model Vendor {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  exams     Exam[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ExamLevel {
  ASSOCIATE
  PROFESSIONAL
  EXPERT
}

// each individual exam, it can belong to a vendor
model Exam {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  vendorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  timeAllowed Int
  attempts    Int
  vendor      Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  examLevel   ExamLevel
  questions   Question[]
  QuizSession QuizSession[]
}

model QuizSession {
  id          String    @id @default(cuid())
  userId      String
  examId      String
  startTime   DateTime
  endTime     DateTime?
  isCompleted Boolean   @default(false)

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam         Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  userAttempts UserAttempt[]

  createdAt DateTime @default(now())
}

model UserAttempt {
  id            String      @id @default(cuid())
  quizSessionId String
  questionId    String
  userAnswer    String
  isCorrect     Boolean?
  skipped       Boolean?
  quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([quizSessionId, questionId])
}

model Question {
  id       String       @id @default(cuid())
  question String
  answer   String
  options  Json
  type     QuestionType @default(MCQ) // New field to handle different question types

  examId      String
  exam        Exam          @relation(fields: [examId], references: [id], onDelete: Cascade)
  UserAttempt UserAttempt[]
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}
